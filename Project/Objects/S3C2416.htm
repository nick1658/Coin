<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\S3C2416.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\S3C2416.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Dec 05 16:36:43 2017
<BR><P>
<H3>Maximum Stack Usage =       2952 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; touchresult &rArr; yqsql_exec &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[11]">Reset_Handler</a>
 <LI><a href="#[1c3]">ERAM_Init</a>
 <LI><a href="#[53]">CopyCodeToRAM</a>
 <LI><a href="#[1b1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8b]">__asm___7_Hsmmc_c_0725b3a1__Delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8b]">__asm___7_Hsmmc_c_0725b3a1__Delay_us</a><BR>
 <LI><a href="#[185]">putc_bfd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[185]">putc_bfd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">DAbt_Handler</a> from exception.o(.text) referenced from s3c2416.o(RESET)
 <LI><a href="#[16]">FIQ_Handler</a> from exception.o(.text) referenced from s3c2416.o(RESET)
 <LI><a href="#[b8]">HandleUART0</a> from uart2416.o(.text) referenced from uart2416.o(.text)
 <LI><a href="#[c1]">HandleUART2</a> from uart2416.o(.text) referenced from uart2416.o(.text)
 <LI><a href="#[17]">IRQ_Handler</a> from exception.o(.text) referenced from s3c2416.o(RESET)
 <LI><a href="#[14]">PAbt_Handler</a> from exception.o(.text) referenced from s3c2416.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from s3c2416.o(RESET) referenced from s3c2416.o(RESET)
 <LI><a href="#[13]">SWI_Handler</a> from exception.o(.text) referenced from s3c2416.o(RESET)
 <LI><a href="#[1e]">Timer0_Handler</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[1d]">Timer1_Handler</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[1c]">Timer2_Handler</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[20]">Timer2_IRQ</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[1b]">Timer3_Handler</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[ca]">Timer3_IRQ</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[1a]">Timer4_Handler</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[21]">Timer4_IRQ</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
 <LI><a href="#[12]">Undef_Handler</a> from exception.o(.text) referenced from s3c2416.o(RESET)
 <LI><a href="#[2e]">__main</a> from __main.o(!!!main) referenced from s3c2416.o(RESET)
 <LI><a href="#[22]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[24]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[23]">_sputc</a> from _sputc.o(.text) referenced 2 times from vsprintf.o(.text)
 <LI><a href="#[2d]">do_db</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[2b]">do_erase</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[26]">do_go</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[25]">do_help</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[10]">do_my_help</a> from my_cmd.o(.text) referenced 4 times from my_cmd.o(my_cmd_sec)
 <LI><a href="#[28]">do_print</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[e]">do_print_version</a> from my_cmd.o(.text) referenced 2 times from my_cmd.o(my_cmd_sec)
 <LI><a href="#[29]">do_read</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[f]">do_receive</a> from my_cmd.o(.text) referenced 2 times from my_cmd.o(my_cmd_sec)
 <LI><a href="#[2c]">do_reset_cpu</a> from my_cmd.o(.text) referenced 2 times from my_cmd.o(.constdata)
 <LI><a href="#[27]">do_set</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[d]">do_task_manager</a> from my_cmd.o(.text) referenced 2 times from my_cmd.o(my_cmd_sec)
 <LI><a href="#[2a]">do_write</a> from my_cmd.o(.text) referenced from my_cmd.o(.constdata)
 <LI><a href="#[19]">main</a> from main.o(.text) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[1f]">timer_update</a> from timer_irq.o(.text) referenced from timer_irq.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, s3c2416.o(RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; MMU_Init &rArr; MMU_SetMTT
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2416.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>MMU_DisableMMU</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[3c]"></a>MMU_EnableMMU</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[31]"></a>MMU_DisableICache</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[34]"></a>MMU_EnableICache</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[30]"></a>MMU_DisableDCache</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[3d]"></a>MMU_EnableDCache</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[32]"></a>MMU_InvalidateDCache</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[33]"></a>MMU_InvalidateICache</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[36]"></a>MMU_InvalidateTLB</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[38]"></a>MMU_SetTTBase</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[39]"></a>MMU_SetDomain</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[3a]"></a>MMU_SetProcessId</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[3b]"></a>MMU_EnableAlignFault</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[12]"></a>Undef_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> s3c2416.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SWI_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> s3c2416.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PAbt_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> s3c2416.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DAbt_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> s3c2416.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FIQ_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> s3c2416.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>IRQ_Register</STRONG> (ARM, 20 bytes, Stack size 0 bytes, exception.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[c3]"></a>IRQ_ClearInt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, exception.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Handler
</UL>

<P><STRONG><a name="[c5]"></a>IRQ_EnableInt</STRONG> (ARM, 108 bytes, Stack size 0 bytes, exception.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[1bf]"></a>IRQ_DisableInt</STRONG> (ARM, 36 bytes, Stack size 0 bytes, exception.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>IRQ_Handler</STRONG> (ARM, 244 bytes, Stack size 8 bytes, exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2416.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>MMU_GetTableBase</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mmu.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>MMU_SetMTT</STRONG> (ARM, 64 bytes, Stack size 20 bytes, mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MMU_SetMTT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[2f]"></a>MMU_Init</STRONG> (ARM, 416 bytes, Stack size 16 bytes, mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMU_Init &rArr; MMU_SetMTT
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetMTT
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableAlignFault
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetProcessId
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetDomain
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetTTBase
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_InvalidateTLB
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_InvalidateICache
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_InvalidateDCache
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableDCache
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableDCache
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableICache
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableICache
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableMMU
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableMMU
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[42]"></a>delay_us</STRONG> (ARM, 60 bytes, Stack size 8 bytes, nand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rNF_WritePage
</UL>

<P><STRONG><a name="[43]"></a>delay_ms1</STRONG> (ARM, 64 bytes, Stack size 8 bytes, nand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rNF_WritePage
</UL>

<P><STRONG><a name="[3f]"></a>rNF_Reset</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rLB_ReadPage
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockErase
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rNF_Init
</UL>

<P><STRONG><a name="[3e]"></a>rNF_Init</STRONG> (ARM, 116 bytes, Stack size 4 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rNF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rNF_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>BlockErase</STRONG> (ARM, 196 bytes, Stack size 4 bytes, nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rNF_Reset
</UL>

<P><STRONG><a name="[41]"></a>rNF_WritePage</STRONG> (ARM, 240 bytes, Stack size 20 bytes, nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[1c1]"></a>rNF_RamdomRead</STRONG> (ARM, 184 bytes, Stack size 0 bytes, nand.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>rLB_ReadPage</STRONG> (ARM, 188 bytes, Stack size 8 bytes, nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rNF_Reset
</UL>

<P><STRONG><a name="[45]"></a>Nand_IsBadBlock</STRONG> (ARM, 64 bytes, Stack size 16 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Nand_IsBadBlock &rArr; Nand_RamdomRead
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_RamdomRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadSkipBad
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
</UL>

<P><STRONG><a name="[47]"></a>Nand_MarkBadBlock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Nand_MarkBadBlock &rArr; Nand_RamdomWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_RamdomWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
</UL>

<P><STRONG><a name="[4c]"></a>Nand_ReadPage</STRONG> (ARM, 416 bytes, Stack size 16 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Nand_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coin_value
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kick_value
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadSkipBad
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
</UL>

<P><STRONG><a name="[49]"></a>Nand_WritePage</STRONG> (ARM, 488 bytes, Stack size 32 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Nand_WritePage &rArr; Nand_MarkBadBlock &rArr; Nand_RamdomWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_MarkBadBlock
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_IsBadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_3
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kick_value
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_coin_value
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WriteSkipBad
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
</UL>

<P><STRONG><a name="[1c2]"></a>Nand_ReadID</STRONG> (ARM, 156 bytes, Stack size 0 bytes, nand.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>Nand_EraseBlock</STRONG> (ARM, 228 bytes, Stack size 16 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Nand_EraseBlock &rArr; Nand_MarkBadBlock &rArr; Nand_RamdomWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_MarkBadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_para_2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WriteSkipBad
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
</UL>

<P><STRONG><a name="[4b]"></a>Nand_ReadSkipBad</STRONG> (ARM, 300 bytes, Stack size 40 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Nand_ReadSkipBad &rArr; Nand_IsBadBlock &rArr; Nand_RamdomRead
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPage
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_IsBadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_3
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCodeToRAM
</UL>

<P><STRONG><a name="[4d]"></a>Nand_WriteSkipBad</STRONG> (ARM, 308 bytes, Stack size 40 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Nand_WriteSkipBad &rArr; Nand_WritePage &rArr; Nand_MarkBadBlock &rArr; Nand_RamdomWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAppToNand
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeToNand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAppToAppSpace
</UL>

<P><STRONG><a name="[4e]"></a>Nand_Init</STRONG> (ARM, 52 bytes, Stack size 8 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Nand_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCodeToRAM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAppToNand
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeToNand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAppToAppSpace
</UL>

<P><STRONG><a name="[50]"></a>WriteCodeToNand</STRONG> (ARM, 44 bytes, Stack size 8 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = WriteCodeToNand &rArr; Nand_WriteSkipBad &rArr; Nand_WritePage &rArr; Nand_MarkBadBlock &rArr; Nand_RamdomWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WriteSkipBad
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
</UL>

<P><STRONG><a name="[51]"></a>WriteAppToNand</STRONG> (ARM, 44 bytes, Stack size 16 bytes, nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WriteSkipBad
</UL>

<P><STRONG><a name="[52]"></a>WriteAppToAppSpace</STRONG> (ARM, 44 bytes, Stack size 16 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = WriteAppToAppSpace &rArr; Nand_WriteSkipBad &rArr; Nand_WritePage &rArr; Nand_MarkBadBlock &rArr; Nand_RamdomWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WriteSkipBad
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>ERAM_Init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lowlevelinit.o(LOWLEVELINIT), UNUSED)

<P><STRONG><a name="[53]"></a>CopyCodeToRAM</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lowlevelinit.o(LOWLEVELINIT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadSkipBad
</UL>

<P><STRONG><a name="[2e]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[56]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c4]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c5]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c6]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[57]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1c7]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[58]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[195]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via BLX)
</UL>

<P><STRONG><a name="[5a]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[5c]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5e]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5f]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[60]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[62]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[64]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[65]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[66]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[68]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[6a]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[6c]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[6e]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[70]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[72]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[74]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[76]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[78]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[84]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via BLX)
</UL>

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via BLX)
</UL>

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1dc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1df]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[1e0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1e1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1e2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1e3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1e4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1e5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1e6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[55]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[81]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[83]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[1e8]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[85]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1b3]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[87]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[1ea]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[89]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>

<P><STRONG><a name="[8b]"></a>__asm___7_Hsmmc_c_0725b3a1__Delay_us</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hsmmc.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WriteBlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_ReadBlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_EraseBlock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Get_CSD
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForTransferDone
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
</UL>

<P><STRONG><a name="[1eb]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[19]"></a>main</STRONG> (ARM, 5280 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2952 + Unknown Stack Size
<LI>Call Chain = main &rArr; touchresult &rArr; yqsql_exec &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_finish
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_env_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStdValue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runfunction
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rNF_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_system_env_info
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_screen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_picaddr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceinit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_precoincount
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_coinlearn
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_ad2_valueget
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_ad1_valueget
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_ad0_valueget
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_env_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alertfuc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_sample
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_offset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAppToAppSpace
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_detect_func
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_exist
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[8c]"></a>port_Init</STRONG> (ARM, 276 bytes, Stack size 0 bytes, driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>RTC_GetTime</STRONG> (ARM, 304 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[b6]"></a>RTC_SetTime</STRONG> (ARM, 324 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[9c]"></a>RTC_Init</STRONG> (ARM, 340 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, s3c2416.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b8]"></a>HandleUART0</STRONG> (ARM, 92 bytes, Stack size 8 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = HandleUART0 &rArr; fill_rec_buf &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rec_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart2416.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>uart_init</STRONG> (ARM, 168 bytes, Stack size 8 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>Uart0_SendByte</STRONG> (ARM, 80 bytes, Stack size 0 bytes, uart2416.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendString
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help
</UL>

<P><STRONG><a name="[11c]"></a>Uart0_sendchar</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart2416.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rec_buf
</UL>

<P><STRONG><a name="[bb]"></a>Uart0_SendString</STRONG> (ARM, 36 bytes, Stack size 4 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uart0_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help
</UL>

<P><STRONG><a name="[92]"></a>Uart0_Printf</STRONG> (ARM, 60 bytes, Stack size 280 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reset_cpu
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_erase
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_para_2
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_3
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sd_coin_coinfig
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_3
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_speed
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pre_count_current
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pre_count_set_value
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_pre_value_info
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_coin_pre_value
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_pre_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_good_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_env_info
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_8
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_7
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_5
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_cmp_data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_step_motor
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_prevalue_coin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_coin_index
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_erase_r_code
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_r_code
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_read_r_code
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_repete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sample_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_test
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchget_from_uart2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rec_buf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_finish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_system_env_info
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_precoincount
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_detect_func
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_receive
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print_version
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_task_manager
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_db
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_para_2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_db_all
</UL>

<P><STRONG><a name="[90]"></a>uart1_init</STRONG> (ARM, 68 bytes, Stack size 0 bytes, uart2416.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_func
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Uart1_SendByte</STRONG> (ARM, 80 bytes, Stack size 0 bytes, uart2416.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_SendString
</UL>

<P><STRONG><a name="[be]"></a>Uart1_SendString</STRONG> (ARM, 36 bytes, Stack size 4 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uart1_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Printf
</UL>

<P><STRONG><a name="[c0]"></a>Uart1_Printf</STRONG> (ARM, 60 bytes, Stack size 280 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Uart1_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_SendString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_func
</UL>

<P><STRONG><a name="[c1]"></a>HandleUART2</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = HandleUART2 &rArr; touchget_from_uart2 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchget_from_uart2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart2416.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>uart2_init</STRONG> (ARM, 168 bytes, Stack size 8 bytes, uart2416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>Uart2_sendchar</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart2416.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>

<P><STRONG><a name="[21]"></a>Timer4_IRQ</STRONG> (ARM, 324 bytes, Stack size 0 bytes, timer_irq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>Timer4_Start</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[1ec]"></a>Timer4_Stop</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>Timer4_Init</STRONG> (ARM, 208 bytes, Stack size 16 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer4_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[ca]"></a>Timer3_IRQ</STRONG> (ARM, 536 bytes, Stack size 0 bytes, timer_irq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>Timer3_Start</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[1ed]"></a>Timer3_Stop</STRONG> (ARM, 64 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>Timer3_Init</STRONG> (ARM, 208 bytes, Stack size 16 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer3_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[20]"></a>Timer2_IRQ</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>Timer2_Start</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[1ee]"></a>Timer2_Stop</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>Timer2_Init</STRONG> (ARM, 208 bytes, Stack size 16 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[1ef]"></a>Timer1_IRQ</STRONG> (ARM, 48 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>Timer1_Start</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>Timer1_Stop</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>Timer1_Init</STRONG> (ARM, 208 bytes, Stack size 16 bytes, timer_irq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1f2]"></a>Timer0_IRQ</STRONG> (ARM, 68 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>Timer0_Start</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>Timer0_Stop</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>Timer0_Init</STRONG> (ARM, 208 bytes, Stack size 16 bytes, timer_irq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[93]"></a>Timer_Init</STRONG> (ARM, 100 bytes, Stack size 8 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Timer_Init &rArr; Timer2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>watchdog_reset</STRONG> (ARM, 76 bytes, Stack size 8 bytes, wdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = watchdog_reset &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>SetWatchDog</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[ce]"></a>ReadAdc0</STRONG> (ARM, 108 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_std_value
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_test
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStdValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_ad0_valueget
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_sample
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_offset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[cf]"></a>ReadAdc1</STRONG> (ARM, 96 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_std_value
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_test
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStdValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_ad1_valueget
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_sample
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_offset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[d0]"></a>ReadAdc2</STRONG> (ARM, 96 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_std_value
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_test
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStdValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_ad2_valueget
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_sample
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_offset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[d1]"></a>ReadAdc3</STRONG> (ARM, 96 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_std_value
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_offset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[95]"></a>adc_init</STRONG> (ARM, 128 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = adc_init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc3
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>delay_ms</STRONG> (ARM, 32 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
</UL>

<P><STRONG><a name="[d7]"></a>Hsmmc_GetCardState</STRONG> (ARM, 68 bytes, Stack size 8 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WriteBlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_ReadBlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_EraseBlock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Get_CSD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetSdState
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
</UL>

<P><STRONG><a name="[d8]"></a>Hsmmc_GetSdState</STRONG> (ARM, 252 bytes, Stack size 16 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hsmmc_GetSdState &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetCardState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForTransferDone
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForCommandDone
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[d9]"></a>Hsmmc_Get_CSD</STRONG> (ARM, 312 bytes, Stack size 32 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hsmmc_Get_CSD &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetCardState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[db]"></a>Hsmmc_EraseBlock</STRONG> (ARM, 208 bytes, Stack size 16 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hsmmc_EraseBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetCardState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[dc]"></a>Hsmmc_ReadBlock</STRONG> (ARM, 420 bytes, Stack size 32 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hsmmc_ReadBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetCardState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForTransferDone
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForCommandDone
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[dd]"></a>Hsmmc_WriteBlock</STRONG> (ARM, 476 bytes, Stack size 32 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetCardState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForTransferDone
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForCommandDone
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[97]"></a>Hsmmc_Init</STRONG> (ARM, 956 bytes, Stack size 16 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetCardState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_SetBusWidth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_SetClock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[98]"></a>Hsmmc_exist</STRONG> (ARM, 12 bytes, Stack size 0 bytes, hsmmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>adcsininget</STRONG> (ARM, 40 bytes, Stack size 0 bytes, yqadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_test
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStdValue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_offset
</UL>

<P><STRONG><a name="[9f]"></a>setStdValue</STRONG> (ARM, 428 bytes, Stack size 72 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setStdValue &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcsininget
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>coin_env_init</STRONG> (ARM, 36 bytes, Stack size 0 bytes, yqadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>AD_Sample_All</STRONG> (ARM, 1044 bytes, Stack size 0 bytes, yqadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_ad0_valueget
</UL>

<P><STRONG><a name="[a6]"></a>cy_ad0_valueget</STRONG> (ARM, 1528 bytes, Stack size 8 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cy_ad0_valueget
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_All
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>cy_ad1_valueget</STRONG> (ARM, 772 bytes, Stack size 8 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cy_ad1_valueget
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>cy_ad2_valueget</STRONG> (ARM, 624 bytes, Stack size 8 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cy_ad2_valueget
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>adstd_test</STRONG> (ARM, 828 bytes, Stack size 144 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = adstd_test &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcsininget
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc3
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
</UL>

<P><STRONG><a name="[e1]"></a>print_std_value</STRONG> (ARM, 456 bytes, Stack size 72 bytes, yqadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc3
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[a0]"></a>adstd_offset</STRONG> (ARM, 1212 bytes, Stack size 80 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = adstd_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcsininget
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc3
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_repeate
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>send_sample_data</STRONG> (ARM, 752 bytes, Stack size 48 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = send_sample_data &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_sample
</UL>

<P><STRONG><a name="[b2]"></a>adstd_sample</STRONG> (ARM, 628 bytes, Stack size 72 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = adstd_sample &rArr; send_sample_data &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sample_data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>cy_adstd_adj</STRONG> (ARM, 584 bytes, Stack size 80 bytes, yqadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = cy_adstd_adj &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc3
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc0
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>prepare_coin_cmp_value</STRONG> (ARM, 232 bytes, Stack size 0 bytes, yqcoin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_precoincount
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_coinlearn
</UL>

<P><STRONG><a name="[e4]"></a>is_good_coin</STRONG> (ARM, 580 bytes, Stack size 0 bytes, yqcoin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_precoincount
</UL>

<P><STRONG><a name="[a9]"></a>cy_precoincount</STRONG> (ARM, 1344 bytes, Stack size 8 bytes, yqcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = cy_precoincount &rArr; disp_allcount &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_good_coin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_coin_cmp_value
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>cy_coinlearn</STRONG> (ARM, 776 bytes, Stack size 8 bytes, yqcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cy_coinlearn &rArr; dgus_tf1word &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_coin_cmp_value
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>detect_read</STRONG> (ARM, 60 bytes, Stack size 8 bytes, yqcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = detect_read &rArr; dgus_tf1word &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>alertfuc</STRONG> (ARM, 2148 bytes, Stack size 272 bytes, yqcoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = alertfuc &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tfbeep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_chinese
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>print_func</STRONG> (ARM, 7424 bytes, Stack size 24 bytes, yqfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = print_func &rArr; Uart1_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_print
</UL>

<P><STRONG><a name="[9b]"></a>comscreen</STRONG> (ARM, 52 bytes, Stack size 24 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_prevalue_coin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_clear_alarm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_repete
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf2word
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_func
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tfbeep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_chinese
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_finish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runfunction
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alertfuc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>touchget_from_uart2</STRONG> (ARM, 440 bytes, Stack size 8 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = touchget_from_uart2 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUART2
</UL>

<P><STRONG><a name="[e5]"></a>dgus_tfbeep</STRONG> (ARM, 32 bytes, Stack size 8 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dgus_tfbeep &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alertfuc
</UL>

<P><STRONG><a name="[e6]"></a>dgus_chinese</STRONG> (ARM, 108 bytes, Stack size 32 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dgus_chinese &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alertfuc
</UL>

<P><STRONG><a name="[eb]"></a>dgus_tf2word</STRONG> (ARM, 84 bytes, Stack size 16 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dgus_tf2word &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_KJAmount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
</UL>

<P><STRONG><a name="[a3]"></a>dgus_tf1word</STRONG> (ARM, 64 bytes, Stack size 16 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dgus_tf1word &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_preselflearn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sample_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_screen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_coinlearn
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>disp_KJAmount</STRONG> (ARM, 72 bytes, Stack size 8 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disp_KJAmount &rArr; dgus_tf2word &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf2word
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_screen
</UL>

<P><STRONG><a name="[a5]"></a>disp_data</STRONG> (ARM, 124 bytes, Stack size 16 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disp_data &rArr; dgus_tf2word &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf2word
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_clear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_screen
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>disp_allcount</STRONG> (ARM, 548 bytes, Stack size 24 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = disp_allcount &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf2word
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_clear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_screen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceinit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_precoincount
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>disp_preselflearn</STRONG> (ARM, 100 bytes, Stack size 32 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disp_preselflearn &rArr; dgus_tf1word &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_prevalue_coin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_screen
</UL>

<P><STRONG><a name="[ee]"></a>test_repete</STRONG> (ARM, 716 bytes, Stack size 8 bytes, yqscreen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_repeate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>

<P><STRONG><a name="[f1]"></a>counter_clear</STRONG> (ARM, 216 bytes, Stack size 8 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = counter_clear &rArr; disp_allcount &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_clear
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[b4]"></a>touchresult</STRONG> (ARM, 5604 bytes, Stack size 288 bytes, yqscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2928 + Unknown Stack Size
<LI>Call Chain = touchresult &rArr; yqsql_exec &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_repeate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_print
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_clear_alarm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writekick_value
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_preselflearn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_KJAmount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tfbeep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_chinese
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>test_read_r_code</STRONG> (ARM, 68 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = test_read_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coin_value
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kick_value
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
</UL>

<P><STRONG><a name="[fa]"></a>test_write_r_code</STRONG> (ARM, 108 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kick_value
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_coin_value
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
</UL>

<P><STRONG><a name="[fb]"></a>test_erase_r_code</STRONG> (ARM, 68 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = test_erase_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_nandflash
</UL>

<P><STRONG><a name="[96]"></a>initial_nandflash</STRONG> (ARM, 1088 bytes, Stack size 16 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = initial_nandflash &rArr; test_erase_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_erase_r_code
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_r_code
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_read_r_code
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>write_coin_value</STRONG> (ARM, 172 bytes, Stack size 16 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_r_code
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
</UL>

<P><STRONG><a name="[fd]"></a>write_kick_value</STRONG> (ARM, 40 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = write_kick_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_r_code
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
</UL>

<P><STRONG><a name="[f0]"></a>write_para</STRONG> (ARM, 32 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kick_value
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_coin_value
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_erase_r_code
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_prevalue_coin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writekick_value
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_repete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_db_all
</UL>

<P><STRONG><a name="[f4]"></a>Writekick_value</STRONG> (ARM, 12 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Writekick_value &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[fe]"></a>read_kick_value</STRONG> (ARM, 40 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = read_kick_value &rArr; test_read_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_read_r_code
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para
</UL>

<P><STRONG><a name="[ff]"></a>read_coin_value</STRONG> (ARM, 908 bytes, Stack size 16 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = read_coin_value &rArr; test_read_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_read_r_code
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para
</UL>

<P><STRONG><a name="[100]"></a>read_para</STRONG> (ARM, 16 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = read_para &rArr; read_coin_value &rArr; test_read_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coin_value
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kick_value
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_picaddr
</UL>

<P><STRONG><a name="[9a]"></a>ini_screen</STRONG> (ARM, 532 bytes, Stack size 24 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ini_screen &rArr; disp_allcount &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_preselflearn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_KJAmount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>ini_picaddr</STRONG> (ARM, 180 bytes, Stack size 8 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ini_picaddr &rArr; read_para &rArr; read_coin_value &rArr; test_read_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>yqsql_exec</STRONG> (ARM, 5200 bytes, Stack size 2216 bytes, yqsqlite3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640 + Unknown Stack Size
<LI>Call Chain = yqsql_exec &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_chinese
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_db_all
</UL>

<P><STRONG><a name="[a2]"></a>deviceinit</STRONG> (ARM, 308 bytes, Stack size 16 bytes, yqdrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = deviceinit &rArr; disp_allcount &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>IR_detect_func</STRONG> (ARM, 500 bytes, Stack size 8 bytes, yqdrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = IR_detect_func &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>runfunction</STRONG> (ARM, 588 bytes, Stack size 8 bytes, yqdrive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = runfunction &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>system_env_init</STRONG> (ARM, 64 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>simple_strtoul</STRONG> (ARM, 272 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = simple_strtoul &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper (via BLX)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_struct
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseHEX
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
</UL>

<P><STRONG><a name="[107]"></a>simple_strtol</STRONG> (ARM, 72 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = simple_strtol &rArr; simple_strtoul &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_task_manager
</UL>

<P><STRONG><a name="[113]"></a>had_ctrlc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
</UL>

<P><STRONG><a name="[10b]"></a>find_cmd</STRONG> (ARM, 168 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = find_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via BLX)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help
</UL>

<P><STRONG><a name="[10e]"></a>parse_line</STRONG> (ARM, 200 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = parse_line &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
</UL>

<P><STRONG><a name="[111]"></a>clear_ctrlc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
</UL>

<P><STRONG><a name="[110]"></a>my_run_command</STRONG> (ARM, 504 bytes, Stack size 248 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = my_run_command &rArr; parse_line &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ctrlc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;had_ctrlc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendString
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze
</UL>

<P><STRONG><a name="[b5]"></a>vTaskCmdAnalyze</STRONG> (ARM, 476 bytes, Stack size 40 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = vTaskCmdAnalyze &rArr; my_run_command &rArr; parse_line &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_arg_analyze
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_true_char_stream
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>run_command</STRONG> (ARM, 104 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = run_command &rArr; vTaskCmdAnalyze &rArr; my_run_command &rArr; parse_line &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWatchDog
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_finish
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[116]"></a>AnalyseHEX</STRONG> (ARM, 220 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AnalyseHEX &rArr; simple_strtoul &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_struct
</UL>

<P><STRONG><a name="[117]"></a>get_hex_struct</STRONG> (ARM, 432 bytes, Stack size 40 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_hex_struct &rArr; AnalyseHEX &rArr; simple_strtoul &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseHEX
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
</UL>

<P><STRONG><a name="[f7]"></a>coin_clear_alarm</STRONG> (ARM, 48 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coin_clear_alarm &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[f8]"></a>coin_print</STRONG> (ARM, 24 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = coin_print &rArr; print_func &rArr; Uart1_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_func
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[f3]"></a>coin_stop</STRONG> (ARM, 16 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[f2]"></a>coin_start</STRONG> (ARM, 104 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coin_start &rArr; comscreen
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[a1]"></a>refresh_data</STRONG> (ARM, 684 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = refresh_data &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>get_hex_data</STRONG> (ARM, 784 bytes, Stack size 40 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288 + Unknown Stack Size
<LI>Call Chain = get_hex_data &rArr; coin_log &rArr; f_open &rArr; find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_struct
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_print
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_clear_alarm
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_screen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_finish
</UL>

<P><STRONG><a name="[11a]"></a>CRC16</STRONG> (ARM, 72 bytes, Stack size 12 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_finish
</UL>

<P><STRONG><a name="[b3]"></a>update_finish</STRONG> (ARM, 308 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296 + Unknown Stack Size
<LI>Call Chain = update_finish &rArr; get_hex_data &rArr; coin_log &rArr; f_open &rArr; find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>fill_rec_buf</STRONG> (ARM, 736 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = fill_rec_buf &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_sendchar
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUART0
</UL>

<P><STRONG><a name="[25]"></a>do_help</STRONG> (ARM, 80 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = do_help &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>do_go</STRONG> (ARM, 1156 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = do_go &rArr; adstd_test &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_test
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>get_coin_index</STRONG> (ARM, 492 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = get_coin_index &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_8
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_7
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_5
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
</UL>

<P><STRONG><a name="[11e]"></a>coin_clear</STRONG> (ARM, 12 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = coin_clear &rArr; counter_clear &rArr; disp_allcount &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
</UL>

<P><STRONG><a name="[ef]"></a>is_repeate</STRONG> (ARM, 952 bytes, Stack size 40 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = is_repeate &rArr; adstd_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adstd_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_7
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_repete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult
</UL>

<P><STRONG><a name="[11f]"></a>set_para_1</STRONG> (ARM, 852 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = set_para_1 &rArr; coin_clear &rArr; counter_clear &rArr; disp_allcount &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_clear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_repeate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_print
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_clear_alarm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_data
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[9e]"></a>print_system_env_info</STRONG> (ARM, 992 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = print_system_env_info &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_2
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>set_para_2</STRONG> (ARM, 1676 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = set_para_2 &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_system_env_info
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[121]"></a>write_to_flash</STRONG> (ARM, 548 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_preselflearn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dgus_tf1word
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_stdvalue_coin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_offsetvalue_coin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_prevalue_coin
</UL>

<P><STRONG><a name="[122]"></a>save_prevalue_coin</STRONG> (ARM, 1048 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = save_prevalue_coin &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_preselflearn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_5
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_4
</UL>

<P><STRONG><a name="[123]"></a>save_all_prevalue_coin</STRONG> (ARM, 248 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = save_all_prevalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_7
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
</UL>

<P><STRONG><a name="[124]"></a>save_all_offsetvalue_coin</STRONG> (ARM, 248 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = save_all_offsetvalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_8
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
</UL>

<P><STRONG><a name="[125]"></a>save_all_stdvalue_coin</STRONG> (ARM, 140 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = save_all_stdvalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
</UL>

<P><STRONG><a name="[126]"></a>run_step_motor</STRONG> (ARM, 200 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = run_step_motor &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
</UL>

<P><STRONG><a name="[127]"></a>print_cmp_data</STRONG> (ARM, 1052 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = print_cmp_data &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_good_data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
</UL>

<P><STRONG><a name="[128]"></a>print_ng_data</STRONG> (ARM, 172 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = print_ng_data &rArr; print_cmp_data &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_cmp_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_8
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_7
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_5
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
</UL>

<P><STRONG><a name="[129]"></a>set_para_3</STRONG> (ARM, 744 bytes, Stack size 80 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = set_para_3 &rArr; save_all_stdvalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_step_motor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_stdvalue_coin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_offsetvalue_coin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_prevalue_coin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_coin_index
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[12a]"></a>set_para_4</STRONG> (ARM, 240 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = set_para_4 &rArr; save_prevalue_coin &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_prevalue_coin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_coin_index
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[12b]"></a>set_para_5</STRONG> (ARM, 576 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = set_para_5 &rArr; save_all_stdvalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_stdvalue_coin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_prevalue_coin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_coin_index
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[12c]"></a>set_para_7</STRONG> (ARM, 228 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = set_para_7 &rArr; save_all_prevalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_prevalue_coin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_coin_index
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_repeate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[12d]"></a>set_para_8</STRONG> (ARM, 116 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = set_para_8 &rArr; save_all_offsetvalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_offsetvalue_coin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_coin_index
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[27]"></a>do_set</STRONG> (ARM, 412 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = do_set &rArr; set_para_3 &rArr; save_all_stdvalue_coin &rArr; write_to_flash &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_8
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_7
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_5
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>print_coin_env_info</STRONG> (ARM, 624 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = print_coin_env_info &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
</UL>

<P><STRONG><a name="[12f]"></a>print_good_data</STRONG> (ARM, 148 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = print_good_data &rArr; print_cmp_data &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_cmp_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
</UL>

<P><STRONG><a name="[130]"></a>print_coin_pre_value</STRONG> (ARM, 396 bytes, Stack size 56 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = print_coin_pre_value &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_pre_value_info
</UL>

<P><STRONG><a name="[131]"></a>print_all_coin_pre_value</STRONG> (ARM, 416 bytes, Stack size 48 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = print_all_coin_pre_value &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_pre_value_info
</UL>

<P><STRONG><a name="[1f5]"></a>print_all_country_pre_value</STRONG> (ARM, 4 bytes, Stack size 0 bytes, my_cmd.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>print_coin_pre_value_info</STRONG> (ARM, 100 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = print_coin_pre_value_info &rArr; print_coin_pre_value &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_coin_pre_value
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_pre_value
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
</UL>

<P><STRONG><a name="[133]"></a>print_pre_count_set_value</STRONG> (ARM, 100 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = print_pre_count_set_value &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
</UL>

<P><STRONG><a name="[134]"></a>print_pre_count_current</STRONG> (ARM, 100 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = print_pre_count_current &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
</UL>

<P><STRONG><a name="[135]"></a>print_speed</STRONG> (ARM, 2184 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = print_speed &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
</UL>

<P><STRONG><a name="[28]"></a>do_print</STRONG> (ARM, 476 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = do_print &rArr; print_coin_pre_value_info &rArr; print_coin_pre_value &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_speed
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pre_count_current
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pre_count_set_value
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_pre_value_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_good_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_env_info
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ng_data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_system_env_info
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>read_para_1</STRONG> (ARM, 608 bytes, Stack size 1648 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = read_para_1 &rArr; run_command &rArr; vTaskCmdAnalyze &rArr; my_run_command &rArr; parse_line &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_read
</UL>

<P><STRONG><a name="[13b]"></a>read_para_2</STRONG> (ARM, 212 bytes, Stack size 2072 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464 + Unknown Stack Size
<LI>Call Chain = read_para_2 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadPage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_read
</UL>

<P><STRONG><a name="[13c]"></a>read_para_3</STRONG> (ARM, 220 bytes, Stack size 2072 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464 + Unknown Stack Size
<LI>Call Chain = read_para_3 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_ReadSkipBad
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_read
</UL>

<P><STRONG><a name="[29]"></a>do_read</STRONG> (ARM, 324 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480 + Unknown Stack Size
<LI>Call Chain = do_read &rArr; read_para_3 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_3
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>write_sd_coin_coinfig</STRONG> (ARM, 740 bytes, Stack size 1152 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = write_sd_coin_coinfig &rArr; f_open &rArr; find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
</UL>

<P><STRONG><a name="[13f]"></a>write_para_1</STRONG> (ARM, 332 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = write_para_1 &rArr; write_sd_coin_coinfig &rArr; f_open &rArr; find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sd_coin_coinfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeToNand
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comscreen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAppToAppSpace
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[140]"></a>write_para_3</STRONG> (ARM, 388 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = write_para_3 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[141]"></a>write_para_4</STRONG> (ARM, 196 bytes, Stack size 2072 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464 + Unknown Stack Size
<LI>Call Chain = write_para_4 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_WritePage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[2a]"></a>do_write</STRONG> (ARM, 116 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480 + Unknown Stack Size
<LI>Call Chain = do_write &rArr; write_para_4 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_3
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>erase_para_2</STRONG> (ARM, 96 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = erase_para_2 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_EraseBlock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_erase
</UL>

<P><STRONG><a name="[2b]"></a>do_erase</STRONG> (ARM, 60 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = do_erase &rArr; erase_para_2 &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_para_2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>do_reset_cpu</STRONG> (ARM, 28 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = do_reset_cpu &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>delete_db_all</STRONG> (ARM, 28 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2648 + Unknown Stack Size
<LI>Call Chain = delete_db_all &rArr; yqsql_exec &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_para_2
</UL>

<P><STRONG><a name="[144]"></a>db_para_2</STRONG> (ARM, 320 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2656 + Unknown Stack Size
<LI>Call Chain = db_para_2 &rArr; delete_db_all &rArr; yqsql_exec &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_db_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_db
</UL>

<P><STRONG><a name="[2d]"></a>do_db</STRONG> (ARM, 60 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672 + Unknown Stack Size
<LI>Call Chain = do_db &rArr; db_para_2 &rArr; delete_db_all &rArr; yqsql_exec &rArr; write_para &rArr; write_coin_value &rArr; test_write_r_code &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_para_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[d]"></a>do_task_manager</STRONG> (ARM, 300 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = do_task_manager &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(my_cmd_sec)
</UL>
<P><STRONG><a name="[e]"></a>do_print_version</STRONG> (ARM, 72 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = do_print_version &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(my_cmd_sec)
</UL>
<P><STRONG><a name="[f]"></a>do_receive</STRONG> (ARM, 140 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = do_receive &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(my_cmd_sec)
</UL>
<P><STRONG><a name="[146]"></a>ctrlc</STRONG> (ARM, 8 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help
</UL>

<P><STRONG><a name="[10]"></a>do_my_help</STRONG> (ARM, 668 bytes, Stack size 56 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = do_my_help &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendString
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(my_cmd_sec)
</UL>
<P><STRONG><a name="[1f6]"></a>disable_ctrlc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, my_cmd.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>coin_log</STRONG> (ARM, 216 bytes, Stack size 1656 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = coin_log &rArr; f_open &rArr; find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_exist
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf (via BLX)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hex_data
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>disk_initialize</STRONG> (ARM, 92 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[171]"></a>disk_status</STRONG> (ARM, 32 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[14a]"></a>disk_read</STRONG> (ARM, 112 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_read &rArr; Hsmmc_ReadBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[14b]"></a>disk_write</STRONG> (ARM, 140 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[14c]"></a>disk_ioctl</STRONG> (ARM, 496 bytes, Stack size 120 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = disk_ioctl &rArr; Hsmmc_Get_CSD &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_EraseBlock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Get_CSD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetSdState
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[14d]"></a>get_fattime</STRONG> (ARM, 68 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_fattime
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[14e]"></a>ff_memalloc</STRONG> (ARM, 20 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ff_memalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[14f]"></a>ff_memfree</STRONG> (ARM, 20 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_memfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[157]"></a>clust2sect</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[154]"></a>get_fat</STRONG> (ARM, 388 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[155]"></a>put_fat</STRONG> (ARM, 520 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[137]"></a>f_mount</STRONG> (ARM, 168 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = f_mount &rArr; find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sd_coin_coinfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
</UL>

<P><STRONG><a name="[138]"></a>f_open</STRONG> (ARM, 672 bytes, Stack size 96 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sd_coin_coinfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
</UL>

<P><STRONG><a name="[174]"></a>f_read</STRONG> (ARM, 732 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[175]"></a>f_write</STRONG> (ARM, 860 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
</UL>

<P><STRONG><a name="[176]"></a>f_sync</STRONG> (ARM, 316 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; Hsmmc_Get_CSD &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[13a]"></a>f_close</STRONG> (ARM, 64 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; Hsmmc_Get_CSD &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sd_coin_coinfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
</UL>

<P><STRONG><a name="[177]"></a>f_chdir</STRONG> (ARM, 204 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[178]"></a>f_getcwd</STRONG> (ARM, 576 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[148]"></a>f_lseek</STRONG> (ARM, 704 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
</UL>

<P><STRONG><a name="[179]"></a>f_opendir</STRONG> (ARM, 264 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[17a]"></a>f_closedir</STRONG> (ARM, 44 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[17b]"></a>f_readdir</STRONG> (ARM, 204 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[17c]"></a>f_stat</STRONG> (ARM, 160 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[17d]"></a>f_getfree</STRONG> (ARM, 432 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[17e]"></a>f_truncate</STRONG> (ARM, 360 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[17f]"></a>f_unlink</STRONG> (ARM, 420 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[180]"></a>f_mkdir</STRONG> (ARM, 672 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[181]"></a>f_chmod</STRONG> (ARM, 228 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[182]"></a>f_utime</STRONG> (ARM, 240 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[183]"></a>f_rename</STRONG> (ARM, 580 bytes, Stack size 144 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[184]"></a>f_mkfs</STRONG> (ARM, 2772 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[139]"></a>f_gets</STRONG> (ARM, 152 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
</UL>

<P><STRONG><a name="[186]"></a>f_putc</STRONG> (ARM, 120 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[187]"></a>f_puts</STRONG> (ARM, 136 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[13e]"></a>f_printf</STRONG> (ARM, 1132 bytes, Stack size 160 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = f_printf &rArr; putc_bfd &rArr;  putc_bfd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sd_coin_coinfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log
</UL>

<P><STRONG><a name="[169]"></a>ff_convert</STRONG> (ARM, 136 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[15d]"></a>ff_wtoupper</STRONG> (ARM, 100 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[104]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_true_char_stream
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper (via BLX)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower (via BLX)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via BLX)
</UL>

<P><STRONG><a name="[145]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc (via BLX)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help (via BLX)
</UL>

<P><STRONG><a name="[147]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree (via BLX)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help (via BLX)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[109]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec (via BLX)
</UL>

<P><STRONG><a name="[106]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul (via BLX)
</UL>

<P><STRONG><a name="[bd]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Printf (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log (via BLX)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Printf (via BLX)
</UL>

<P><STRONG><a name="[e7]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec (via BLX)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coin_log (via BLX)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alertfuc (via BLX)
</UL>

<P><STRONG><a name="[18c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[18d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[18b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[63]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[192]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[69]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[71]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[193]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via BLX)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[10c]"></a>strchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd (via BLX)
</UL>

<P><STRONG><a name="[112]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command (via BLX)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze (via BLX)
</UL>

<P><STRONG><a name="[e8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command (via BLX)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd (via BLX)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros (via BLX)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec (via BLX)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchresult (via BLX)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alertfuc (via BLX)
</UL>

<P><STRONG><a name="[10d]"></a>strncmp</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd (via BLX)
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_finish
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[114]"></a>strcmp</STRONG> (ARM, 240 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_std_value
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStdValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_adstd_adj
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real (via BLX)
</UL>

<P><STRONG><a name="[1fd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[7d]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via BLX)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[1fe]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[198]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7b]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[19a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[18f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[191]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[18a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[23]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[19b]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[73]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[75]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[6b]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[67]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[6f]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[196]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[190]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[201]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[202]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[19f]"></a>_ll_udiv10</STRONG> (ARM, 152 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via BLX)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[203]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via BLX)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[1ab]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via BLX)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via BLX)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (via Veneer)
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[77]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[79]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[19e]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[199]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[204]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1aa]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a4]"></a>_btod_etento</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1af]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via BLX)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1b4]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1b5]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_speed
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yqsql_exec
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_func
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_allcount
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_my_help
</UL>

<P><STRONG><a name="[1a5]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1bb]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1ba]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1bc]"></a>__btod_div_common</STRONG> (ARM, 712 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1bd]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a6]"></a>_btod_ediv</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1a7]"></a>_btod_emul</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1be]"></a>__btod_mult_common</STRONG> (ARM, 612 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1a9]"></a>__ARM_fpclassify</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real (via BLX)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[194]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[22]"></a>_get_lc_ctype</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>_get_lc_numeric</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via BLX)
</UL>

<P><STRONG><a name="[a]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real (via BLX)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[5d]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[61]"></a>_printf_fp_hex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[46]"></a>Nand_RamdomRead</STRONG> (ARM, 284 bytes, Stack size 16 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Nand_RamdomRead
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_IsBadBlock
</UL>

<P><STRONG><a name="[48]"></a>Nand_RamdomWrite</STRONG> (ARM, 336 bytes, Stack size 20 bytes, nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Nand_RamdomWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_MarkBadBlock
</UL>

<P><STRONG><a name="[4f]"></a>Nand_Reset</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nand_Init
</UL>

<P><STRONG><a name="[1f]"></a>timer_update</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_irq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>Timer4_Handler</STRONG> (ARM, 28 bytes, Stack size 8 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer4_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>Timer3_Handler</STRONG> (ARM, 28 bytes, Stack size 8 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer3_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>Timer2_Handler</STRONG> (ARM, 28 bytes, Stack size 8 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>Timer1_Handler</STRONG> (ARM, 28 bytes, Stack size 8 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>Timer0_Handler</STRONG> (ARM, 28 bytes, Stack size 8 bytes, timer_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_irq.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>Hsmmc_ClockOn</STRONG> (ARM, 80 bytes, Stack size 0 bytes, hsmmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_SetClock
</UL>

<P><STRONG><a name="[d2]"></a>Hsmmc_SetClock</STRONG> (ARM, 136 bytes, Stack size 8 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hsmmc_SetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_ClockOn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
</UL>

<P><STRONG><a name="[d6]"></a>Hsmmc_WaitForCommandDone</STRONG> (ARM, 200 bytes, Stack size 0 bytes, hsmmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WriteBlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_ReadBlock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetSdState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
</UL>

<P><STRONG><a name="[d4]"></a>Hsmmc_WaitForTransferDone</STRONG> (ARM, 228 bytes, Stack size 16 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hsmmc_WaitForTransferDone
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_Hsmmc_c_0725b3a1__Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WriteBlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_ReadBlock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetSdState
</UL>

<P><STRONG><a name="[d5]"></a>Hsmmc_IssueCommand</STRONG> (ARM, 368 bytes, Stack size 32 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WaitForCommandDone
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_WriteBlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_EraseBlock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Get_CSD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetSdState
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_GetCardState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_SetBusWidth
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
</UL>

<P><STRONG><a name="[da]"></a>Hsmmc_SetBusWidth</STRONG> (ARM, 228 bytes, Stack size 16 bytes, hsmmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hsmmc_SetBusWidth &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_IssueCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hsmmc_Init
</UL>

<P><STRONG><a name="[103]"></a>get_true_char_stream</STRONG> (ARM, 328 bytes, Stack size 24 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_true_char_stream &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze
</UL>

<P><STRONG><a name="[108]"></a>string_to_dec</STRONG> (ARM, 272 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = string_to_dec &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower (via BLX)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_para_2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_3
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_1
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_print
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_coin_pre_value_info
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_8
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_5
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_3
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_para_1
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_coin_index
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_arg_analyze
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_para_2
</UL>

<P><STRONG><a name="[10a]"></a>cmd_arg_analyze</STRONG> (ARM, 192 bytes, Stack size 56 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cmd_arg_analyze &rArr; string_to_dec &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskCmdAnalyze
</UL>

<P><STRONG><a name="[10f]"></a>process_macros</STRONG> (ARM, 600 bytes, Stack size 112 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = process_macros &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_run_command
</UL>

<P><STRONG><a name="[15f]"></a>mem_cpy</STRONG> (ARM, 40 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[153]"></a>mem_set</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[162]"></a>mem_cmp</STRONG> (ARM, 60 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[16b]"></a>chk_chr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[150]"></a>sync_window</STRONG> (ARM, 144 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[151]"></a>move_window</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[152]"></a>sync_fs</STRONG> (ARM, 320 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sync_fs &rArr; disk_ioctl &rArr; Hsmmc_Get_CSD &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[156]"></a>remove_chain</STRONG> (ARM, 300 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = remove_chain &rArr; disk_ioctl &rArr; Hsmmc_Get_CSD &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[158]"></a>create_chain</STRONG> (ARM, 380 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[159]"></a>dir_sdi</STRONG> (ARM, 292 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[15a]"></a>dir_next</STRONG> (ARM, 504 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[15b]"></a>dir_alloc</STRONG> (ARM, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[16d]"></a>ld_clust</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[173]"></a>st_clust</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[15c]"></a>cmp_lfn</STRONG> (ARM, 232 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[164]"></a>pick_lfn</STRONG> (ARM, 208 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[166]"></a>fit_lfn</STRONG> (ARM, 196 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[15e]"></a>gen_numname</STRONG> (ARM, 280 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[161]"></a>sum_sfn</STRONG> (ARM, 56 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[160]"></a>dir_find</STRONG> (ARM, 396 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[163]"></a>dir_read</STRONG> (ARM, 340 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
</UL>

<P><STRONG><a name="[165]"></a>dir_register</STRONG> (ARM, 548 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[167]"></a>dir_remove</STRONG> (ARM, 200 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[168]"></a>get_fileinfo</STRONG> (ARM, 428 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
</UL>

<P><STRONG><a name="[16a]"></a>create_name</STRONG> (ARM, 1136 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[16c]"></a>follow_path</STRONG> (ARM, 332 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[170]"></a>get_ldnumber</STRONG> (ARM, 140 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[16e]"></a>check_fs</STRONG> (ARM, 208 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; Hsmmc_WriteBlock &rArr; Hsmmc_GetCardState &rArr; Hsmmc_IssueCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[16f]"></a>find_volume</STRONG> (ARM, 1444 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = find_volume &rArr; disk_initialize &rArr; Hsmmc_Init &rArr; Uart0_Printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[172]"></a>validate</STRONG> (ARM, 116 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[185]"></a>putc_bfd</STRONG> (ARM, 144 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = putc_bfd &rArr;  putc_bfd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
</UL>

<P><STRONG><a name="[1b8]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1b7]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1b6]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1b9]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[1a3]"></a>_fp_digits</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via BLX)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via BLX)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1b2]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19c]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
