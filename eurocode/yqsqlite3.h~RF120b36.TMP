
#ifndef __TQ2416_YQSQLITE3_H__
#define __TQ2416_YQSQLITE3_H__

#include "def.h"

#define DBINSERT 1
#define DBDELETE 2
#define DBDISPLAY 3
#define DBDISPLAYBACK 4

#define HISTORYSAVANUM (32)

#define PAGE_BYTE_SIZE (2048)
#define BLOCK_PAGE_SIZE (64)
#define BLOCK_BYTE_SIZE (PAGE_BYTE_SIZE * BLOCK_PAGE_SIZE)

#define ITEM_SIZE HISTORYSAVANUM  //记录的大小
#define PAGE_ITEM_NUM_SIZE (PAGE_BYTE_SIZE / ITEM_SIZE) //一页中记录的条数


						//条数				//日期					   //工号 //金额				//数量				//异币		
/////////////////////////(BLOCK * (64 * 2048) + PAGE)	
#define PUBULIC_DATA_START_BLOCK_NUM 20
#define PUBULIC_DATA_START_PAGE_NUM 0
#define HISTORY_START_BLOCK_NUM (PUBULIC_DATA_START_BLOCK_NUM + 1)
#define HISTORY_START_PAGE_NUM (0)

#define DATA_START_BLOCK  (PUBULIC_DATA_START_BLOCK_NUM	* (64 * 2048) + PUBULIC_DATA_START_PAGE_NUM * 2048)  //保存公共信息页 START BLOCK 20 PAGE 0
#define YQNDHISTORYBLOCK (HISTORY_START_BLOCK_NUM * (64 * 2048))  //nations保存历史 信息页币种0-50块-3200页 0-2048  22个字节   4--110块--7040 条数是93的多少倍就换加多少页

// 初始化完成了  单条写入  判断   读出显示 任意读也可以 所以 可以写一个类似数据库的方式  任意读  任意写 删除数据库最简单了
#define YQNDHISTORYADDR (YQNDHISTORYBLOCK + (para_set_value.data.db_total_item_num * ITEM_SIZE) / PAGE_BYTE_SIZE)  //nations保存历史 的  地址  由条数 国家币种决定 页

#define YQNDHISTORY_DB_ID_PAGE_ADDR (YQNDHISTORYBLOCK + (db_id * ITEM_SIZE / PAGE_BYTE_SIZE))





#define NDGETKICKD 3// 公共信息页 地址定义getkickd
#define NDGETKICKT 4// 公共信息页 地址定义getkickt
#define NDPANBLOCKTIME 5// 公共信息页 地址定义panblocktime
#define NDSTOREMTIME 6// 公共信息页 地址定义storemtime
#define NDCOINCHOOSE 7// 公共信息页 地址定义coinchoose
#define NDGHNOW 8// 公共信息页 地址定义gh_now

//		para_set_value.data.db_total_item_num == 0;
//		yqnddata[NDdb_total_item_num(0)] = 0x00;    //公共信息 para_set_value.data.db_total_item_num

// 每种币给 300个字节 4一个程序限4种币 *300 = 1200
#define NDdb_total_item_num (9+300*coinchoose)  //para_set_value.data.db_total_item_num  2BYTE
#define NDZENUM (9+300*coinchoose+2)// para_set_value.data.total_money 4BYTE 
#define NDZSNUM (9+300*coinchoose+6)// para_set_value.data.total_good 4BYTE
#define NDFGNUM (9+300*coinchoose+10)// para_set_value.data.total_ng 4BYTE

#define NDCN0VALUELEVEL (9+300*coinchoose+14)// accoinamount[coinchoose]. fg_coin 3BYTE	  15 16
 

#define NDCOIN0MAXNUM(i) (9+300*coinchoose+17+20*i)// COIN0 2BYTE 14
#define NDCOIN0MINNUM(i) (9+300*coinchoose+19+20*i)// COIN0 2BYTE 16
#define NDCOIN1MAXNUM(i) (9+300*coinchoose+21+20*i)// COIN0 2BYTE 18
#define NDCOIN1MINNUM(i) (9+300*coinchoose+23+20*i)// COIN0 2BYTE 20
#define NDCOIN2MAXNUM(i) (9+300*coinchoose+25+20*i)// COIN0 2BYTE 22
#define NDCOIN2MINNUM(i) (9+300*coinchoose+27+20*i)// COIN0 2BYTE 24
#define NDCOIN0STDNUM(i) (9+300*coinchoose+29+20*i)// COIN0 2BYTE 26
#define NDCOIN1STDNUM(i) (9+300*coinchoose+31+20*i)// COIN0 2BYTE 28
#define NDCOIN2STDNUM(i) (9+300*coinchoose+33+20*i)// COIN0 2BYTE 30

#define NDCOINYZNUM(i) (9+300*coinchoose+35+20*i)// COIN0 yuzhi value	32




typedef struct
{
	U32	index;
	U8  time[8];
	U32 ID;
	U32 money;
	U32 total_good;
	U32 total_ng;
	U32 RESERVE;
}s_db_item_info;

typedef struct
{
	s_db_item_info item_info_array[PAGE_BYTE_SIZE / ITEM_SIZE];
}s_db_item_block;


#define COUNTRY0_COIN_PRE_VALUE_START_BLOCK_NUM PUBULIC_DATA_START_BLOCK_NUM
#define COUNTRY0_COIN_PRE_VALUE_START_PAGE_NUM (2 + PUBULIC_DATA_START_PAGE_NUM)
#define COUNTRY0_COIN_PRE_VALUE_START_ADDR (DATA_START_BLOCK + COUNTRY0_COIN_PRE_VALUE_START_PAGE_NUM * 2048)
#define COIN_TYPE_NUM 32
#define COUNTRY_NUM 16

#define MAGIC_NUM 0xA55A

typedef struct
{
	U16 magic_num;
	U16 db_total_item_num;
	U16 country_id;
	U16 coin_id;
	U16 op_id;
	U16 rej_level;
	U32 precoin_set_num[COIN_TYPE_NUM];
	U32 total_money;
	U32 total_good;
	U32 total_ng;
	U32 * pre_count_set[COIN_TYPE_NUM];
	U32 * pre_count_current[COIN_TYPE_NUM];
	U32 pre_count_coin_type[COIN_TYPE_NUM];
}s_coin_parameter_value;

typedef union
{
	U8 fill[PAGE_BYTE_SIZE];
	s_coin_parameter_value data;
}u_coin_parameter_value;

extern u_coin_parameter_value para_set_value;


typedef struct
{
	S16 max0;
	S16 min0;
	S16 max1;
	S16 min1;
	S16 max2;
	S16 min2;
	S16 std0;
	S16 std1;
	S16 std2;
}s_coin_cmp_value;

typedef struct
{
	s_coin_cmp_value coin[COIN_TYPE_NUM];

}s_coin_pre_value;

typedef union
{
	U8 fill[PAGE_BYTE_SIZE];
	s_coin_cmp_value coin[COIN_TYPE_NUM];

}u_coin_pre_value;

typedef struct
{
	u_coin_pre_value country[COUNTRY_NUM];
}s_country_coin;

extern s_country_coin pre_value;

extern volatile char dbsave[HISTORYSAVANUM]; 





void Readkick_value(void);  	//读出 当前踢币时延  踢币持续时间 转盘堵转时间  传送带传送时间 
void Writekick_value(void);		//写入 当前踢币时延  踢币持续时间 转盘堵转时间  传送带传送时间 
void Readcoin(void);  	//读出 币种名称 工号
void Writecoin(void);		//写入  币种名称 工号
void Readpre_value(void);  //读出 当前币种 历史数据 总
void Writepre_value(void);	//写入 当前币种 历史数据 总

void read_para (void);
void write_para (void);

void Readcoinall_value(void); 	 // read  COIN  0--8
void read_coin_value(void); 	 // read  COIN  0--8
void write_coin_value (void);
void Write_value(U16 coin);    //写入 鉴别值 基准值  根据币种写
void Write_YZvalue(U16 coin);    //写入 预置值  根据面额写

void Read_qflevel(void);	     //qingfen level read
void Write_qflevel(void);   //qingfen level write

//void Writecoinall_value(U16 coin);   	//write coin 0--8




void ini_picaddr(void); //币种切换时的 初始化地址函数


void initial_nandflash(void);    //nandflash

void yqsql_exec(U16 chos);    


S16 test_read_r_code (S16 r_code);
S16 test_write_r_code (S16 r_code);
S16 test_erase_r_code (S16 r_code);



#endif
